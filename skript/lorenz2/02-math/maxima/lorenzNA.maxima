f(gamma1, gamma2, x, y) :=
block ( [],
  if (abs(x) = gamma1) and (abs(y) = gamma2)
    then signum(x)*signum(y)
    else 0
)$

batchload("vectorIndex.maxima")$

funDetA2(gamma1, gamma2, alpha1, alpha2, beta1, beta2, offsetA) :=
block ( [],
  beta2 * (
    a^2
    * (alpha1 - beta1) * (alpha1 + beta1)
    + (alpha2 - beta2) * (alpha2 + beta2)
  ) * X(vectorIndex(beta1, beta2, offsetA)) * ( /* A(beta1, beta2) */
    f(gamma1, gamma2, alpha1 + beta1, alpha2 + beta2)
    + f(gamma1, gamma2, alpha1 + beta1, alpha2 - beta2)
    - f(gamma1, gamma2, alpha1 - beta1, alpha2 + beta2)
    - f(gamma1, gamma2, alpha1 - beta1, alpha2 - beta2)
  )
)$

funDetA1(gamma1, gamma2, alpha1, alpha2, order, offsetA) :=
block ( [],
  alpha1 * X(vectorIndex(alpha1, alpha2, offsetA)) *  /* A(alpha1, alpha2) */
  sum(
    sum(
      funDetA2(gamma1, gamma2, alpha1, alpha2, n, l - n, offsetA)
    , n, 0, l)
  , l, 1, order)
)$

dotA(gamma1, gamma2, order, offsetA, offsetB) :=
block ( [],
  if gamma1 < 1 and gamma2 < 1
    then 0
    else
      (
        -nu * (gamma1^2 * a^2 + gamma2^2) * X(vectorIndex(gamma1, gamma2, offsetA)) /* A(gamma1, gamma2) */
        +(gamma1 * c * a) / (gamma1^2 * a^2 + gamma2^2) * X(vectorIndex(gamma1, gamma2, offsetB))  /* B(gamma1, gamma2) */
      ) * signum(gamma1) * signum(gamma2)
      + a / (4 * (gamma1^2 * a^2 + gamma2^2)) * sum(
        sum(
          funDetA1(gamma1, gamma2, m, k - m, order, offsetA)
        , m, 0, k)
      , k, 1, order)
)$
